require ("core.min.js")
var lib = require ("core.min.js/src")
var $$$ = require ("vue.min.js/library/package.vue")
const {define, echo} = lib
const {zero, one} = lib
const {un_define} = lib.function

define ($$$.vue).class ("account", class {
	constructor (vue) {
		this.vue = vue
		this.session = this.vue.app.session.get ("account")
		this.is = new $$$.vue.account.is (this)
		}
	start () { return this }
	access (access) {
		if (this.session) {
			if (access) return this.session.access.exist (access)
			else return this.status ("active")
			}
		}
	status (status) {
		if (this.session) {
			if (status) return this.account.session.status === status
			else return this.account.session.status
			}
		}
	})

define ($$$.vue.account).function ("session", function (account) {
	this.vue.app.session.set ("account:on-line", account.id).set ("account", (this.vue.app.account.session = account)).write ()
	})

define ($$$.vue.account).class ("is", class {
	constructor (account) {
		this.account = account
		this.vue = account.vue
		}
	active () { return this.account.status ("active") }
	})

define ($$$.vue.account).function ("field", function (data) {
	var field = {
		account: null,
		user: {name: null},
		email: [{name: null, address: null}],
		phone: [{name: null, code: null, number: null}],
		password: null,
		profile: {
			name: null,
			birth: null,
			address: [{name: null, line: null, country: null, province: null, city: null, state: null, postal: null, coordinate: {latitude: null, longitude: null}, picture: []}],
			description: null,
			},
		type: null,
		group: null,
		level: null,
		provider: null,
		status: null,
		check: null,
		access: [],
		money: 0,
		coin: 0,
		setting: {time: {zone: null}, language: null, locale: null, currency: null},
		}
	return lib.object.join (field, data)
	})

define ($$$.vue.account.field).function ("filter", function (account) {
	delete account.password
	return account
	})

define ($$$.vue.account).function ("install", function () {
	var view = this.vue.app.db.view.create ("account")
	view.select ("account").pipe ({"$:lookup": {"$:on": "account_log", "$:foreign": "account", "$:field": "_id", "$:output": "log"}})
	view.then ()
	view.catch ()
	})

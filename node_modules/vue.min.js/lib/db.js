require ("core.min.js")
var lib = require ("core.min.js/src")
var $$$ = require ("vue.min.js/library/package.vue")
const {define, echo} = lib
const {zero, one} = lib

define ($$$.vue).function ("db", function (vue) {
	return function () {
		return vue
		}
	})

define ($$$.vue.db).function ("setup", function (vue) {
	return function () {
		return vue
		}
	})

define ($$$.vue).function ("data", function (vue) {
	return function () {
		return vue
		}
	})

define ($$$.vue.data).function ("base", function (vue) {
	return function (setup) {
		if (setup === "app") return new lib.mongo (vue.app.package.get ("db"))
		else return new lib.mongo ($$$.app.package.get ("db"))
		}
	})

define ($$$.vue.data).function ("create", function (vue) {
	return function () {
		return lib.file.create (vue.app.db.cache.file, vue.app.db.connection, {type: "json", pretty: true})
		}
	})

define ($$$.vue.data).function ("cache", function (vue) {
	return function () {
		var hash = lib.json.format (vue.app.db.connection).sha ("one").concat (lib.file.extension.json)
		var file = lib.path.join (vue.app.dir.tmp.cache, "db", hash)
		vue.app.db.cache = {file}
		return vue.app.db.cache.exist = lib.file.exist (vue.app.db.cache.file)
		}
	})

/*
this.vue.app.db.list ("collection").then (console.log).catch (console.log)
this.vue.app.db.is_collection ("collection").then (console.log).catch (console.log)
var db_view = this.vue.app.db.view.create ("collection")
db_view.select ("collection").pipe ({"$:lookup": {"$:on": "collection_foreign", "$:foreign": "collection", "$:field": "_id", "$:output": "output"}})
db_view.then (console.log)
db_view.catch (console.log)
*/

require ("core.min.js")
var lib = require ("core.min.js/src"), v_dom = lib.dom.format
var $$$ = require ("vue.min.js/library/package.vue")
const {define, echo} = lib
const {zero, one} = lib

define ($$$.vue).function ("render", function (request, response) {
	var render = new $$$.vue.render.class (this, request, response)
	$$$.emit ("render:setup", request, response, render)
	$$$.vue.render.header.call (this, request, response, render)
	$$$.vue.render.header.socket.call (this, request, response, render)
	$$$.emit ("render:seo", request, response, render)
	$$$.vue.render.header.meta.call (this, request, response, render)
	$$$.vue.render.header.asset.call (this, request, response, render)
	$$$.vue.render.header.asset.css.call (this, request, response, render)
	$$$.vue.render.header.asset.js.call (this, request, response, render)
	$$$.emit ("render:header", request, response, render)
	for (var i in render.dom.meta) render.dom.header.push (render.dom.meta [i])
	for (var i in render.dom.link) render.dom.header.push (render.dom.link [i])
	for (var i in render.dom.css) render.dom.header.push (render.dom.css [i])
	for (var i in render.dom.js) render.dom.header.push (render.dom.js [i])
	for (var i in render.dom.script) render.dom.header.push (render.dom.script [i])
	for (var i in render.dom.style) render.dom.header.push (render.dom.style [i])
	return this.response.end (render.process ())
	})

define ($$$.vue.render).class ("class", class {
	constructor (vue, request, response) {
		this.vue = vue
		this.request = request
		this.response = response
		this.mark (this.dom = new $$$.vue.render.dom (this))
		}
	mark () {
		if (lib.is.object (this.response)) this.markup = $$$.vue.fp.markup.replace ("vue://version", "0.0.0")
		else {
			this.markup = this.response
			this.response = {}
			}
		}
	process () {
		if (this.response.link) {
			this.dom.footer.push (v_dom ("script", {}, "document.link = " + lib.json.encode (this.response.link)))
			}
		this.markup = this.markup.replace ("<html>", v_dom ("html", this.dom.html))
		this.markup = this.markup.replace ("<head>", v_dom ("head", this.dom.head))
		this.markup = this.markup.replace ("<body>", v_dom ("body", this.dom.body))
		if (this.dom.header.length) this.markup = this.markup.replace ("<script header></script>", this.dom.header.join ("\n\t\t"))
		if (this.dom.footer.length) this.markup = this.markup.replace ("<script footer></script>", this.dom.footer.join ("\n\t\t"))
		if (this.dom.mark.length) this.markup = this.markup.replace ("<noscript header></noscript>", this.dom.mark.join ("\n\t\t"))
		if (this.dom.no_script.length) this.markup = this.markup.replace ("<noscript></noscript>", this.dom.no_script.join ("\n\t\t"))
		$$$.emit ("render:process", this.request, this.response, this)
		this.markup = lib.dom.markup (this.markup)
		return this.convert ()
		}
	convert () {
		var convert = {
			"express://version": "0.0.0",
			"vue://version": "0.0.0",
			"vue://server/version": $$$.app.package.get ("version"),
			"vue://client/version": this.vue.app.package.get ("version"),
			"vue://cgi-bin/plugin": this.vue.c_url.concat (this.vue.path.get ("/cgi-bin/plugin")),
			"vue://static": this.vue.c_url.concat (this.vue.path.get ("/static")),
			"vue://": this.vue.c_url.concat ("/"),
			}
		for (var i in convert) this.markup = this.markup.replace (i, convert [i])
		$$$.emit ("render:convert", this.request, this.response, this)
		return this.markup
		}
	})

define ($$$.vue.render).class ("dom", class {
	constructor (render) {
		this.render = render
		this.html = {}, this.head = {}, this.header = [], this.footer = []
		this.meta = [], this.link = [], this.script = [], this.style = [], this.css = [], this.js = []
		this.body = {}, this.no_script = []
		this.mark = []
		}
	push (key, attribute, ... value) {
		if (key === "$:head" || key === "$:header") this.header.push (lib.to.string (attribute))
		else if (key === "head" || key === "header") this.mark.push (lib.to.string (attribute))
		else if (key === "css") this.css.push (v_dom ("link", lib.object.assign ({rel: "stylesheet"}, attribute), null, {}, ... value))
		else if (key === "js") this.js.push (v_dom ("script", attribute, null, {block: true}, ... value))
		else if (key === "link:alternate") this.link.push (v_dom ("link", lib.object.assign ({rel: "alternate"}, attribute), ... value))
		else if (key.split (":").length > one) {
			var index = key.split (":")
			var parent = index [zero]
			var tag = index [one]
			if (parent === "head") this.header.push (v_dom (tag, attribute, ... value))
			if (parent === "header") this.header.push (v_dom (tag, attribute, ... value))
			}
		else if (key in this) this [key].push (v_dom (key, attribute, ... value))
		return this
		}
	})

define ($$$.vue.render).function ("header", function (request, response, render) {
	var meta = {
		locale: this.app.language.get ("meta:content-language") || this.app.package.get ("language") ["*"],
		charset: this.web.site.config ["meta:charset/list"].select ("value", {key: this.web.site.config ["meta:charset"]}),
		view: {port: this.web.site.config ["meta:view-port/list"].select ("value", {key: this.web.site.config ["meta:view-port"]})},
		}
	render.dom.html.lang = meta.locale
	render.dom.head.profile = "#"
	render.dom.push ("header:title", {id: "title"}, this.app.language.get (lib.to.string (response.title)), {block: true})
	render.dom.push ("header:style", {id: "style"}, "* {}")
	if (this.web.site.config ["meta:charset"]) render.dom.push ("header:meta", {charset: meta.charset})
	if (this.web.site.config ["meta:x-edge"]) render.dom.push ("header:meta", {"http-equiv": "x-edge", "content": "ie=edge"})
	if (this.web.site.config ["meta:content-type"] || true) render.dom.push ("header:meta", {"http-equiv": "content-type", "content": "text/html"})
	if (this.web.site.config ["meta:content-language"] || true) render.dom.push ("header:meta", {"http-equiv": "content-language", "content": (this.web.site.config ["meta:content-language"] || meta.locale)})
	if (this.web.site.config ["meta:view-port"]) render.dom.push ("header:meta", {name: "view:port", content: meta.view.port})
	})

define ($$$.vue.render.header).function ("socket", function (request, response, render) {
	render.dom.push ("header:meta", {name: "socket:url", content: lib.url.format (this.web.socket.proxy, {protocol: "ws"})})
	render.dom.push ("header:meta", {name: "socket:token", content: this.web.socket.token})
	})

define ($$$.vue.render.header).function ("meta", function (request, response, render) {
	render.dom.push ("header:meta", {name: "author", content: ""})
	render.dom.push ("header:meta", {name: "generator", content: ""})
	})

define ($$$.vue.render.header).function ("asset", function (request, response, render) {
	if (null) render.dom.push ("header:link", {rel: "icon", type: "image/x-icon", href: "vue://static/icon/favorite.svg"})
	else render.dom.push ("header:link", {rel: "icon", type: "image/x-icon", href: "vue://icon/favorite.svg"})
	render.dom.push ("header:link", {rel: "canonical", href: request.parse_url.reference})
	})

define ($$$.vue.render.header.asset).function ("css", function (request, response, render) {
	if (null) render.dom.push ("css", {rel: "stylesheet", href: this.c_url.concat (this.path.get ("/cgi-bin/style.css")).concat (lib.url.query.format ({cache: this.app.session.get ("cache").id}))})
	for (var i in this.asset.link) {
		if (this.asset.link [i].rel === "stylesheet") {
			var c_url, attribute, a = []
			if (lib.is.url (this.asset.link [i].href)) c_url = ""
			else c_url = this.c_url
			if (this.asset.link [i].crossorigin === "crossorigin") a.push ("crossorigin")
			attribute = {rel: this.asset.link [i].rel, href: c_url.concat (this.asset.link [i].href)}
			render.dom.push ("css", attribute, a)
			}
		}
	})

define ($$$.vue.render.header.asset).function ("js", function (request, response, render) {
	for (var i in this.asset.script) {
		var c_url, a = []
		if (lib.is.url (this.asset.script [i].src)) c_url = ""
		else c_url = this.c_url
		if (this.asset.script [i].defer === "defer") a.push ("defer")
		render.dom.push ("js", {src: c_url.concat (this.asset.script [i].src)}, a)
		}
	})

define ($$$.vue.render).function ("css", function (input, render) {
	for (var i in render) input = input.replace (("@").concat (i), render [i]);
	return input;
	})

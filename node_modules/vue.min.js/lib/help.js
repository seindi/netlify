require ("core.min.js")
var lib = require ("core.min.js/src")
var $$$ = require ("vue.min.js/library/package.vue")
const {define, echo} = lib
const {zero, one} = lib

define ($$$.vue).function ("emit", function (key, ... value) {
	if (key in $$$.vue.on.data) return $$$.vue.on.data [key].call (null, ... value)
	})

define ($$$.vue).function ("package", function (config, server) {
	var data = {}
	for (var i in config) {
		if (server) if (i === "fire") continue
		if (i === "db") continue
		if (i === "web") continue
 		else data [i] = config [i]
		}
	data.db = {
		setup: (config.db ? config.db.setup : null),
		collection: (config.db ? config.db.collection : {}),
		}
	return data
	})

define ($$$.vue).class ("is", class {
	constructor (vue) {
		this.access = new $$$.vue.is.access (this.vue = vue)
		}
	token (request, response) {
		if (request) {
			if (request.path === this.vue.request.url) {
				if (this.file (request.path.substr (one))) {
					request.cross.over = null
					return "static"
					}
				}
			if (request.token === $$$.app.package.get ("host").token) return true
			}
		if (this.vue.request.token === $$$.app.package.get ("host").token) return true
		else if (this.vue.error_log) this.vue.app.error.log ("token").write ()
		return false
		}
	tokenizer (prop) {
		var tokenizer
		if (lib.is.object (prop)) if (prop.context) tokenizer = prop.context.tokenizer
		else tokenizer = prop
		else tokenizer = prop
		if (this.vue.tokenizer === tokenizer) return true
		else this.vue.app.error.log ("tokenizer").write ()
		return false
		}
	file (file) {
		return lib.file.exist (lib.path.join (this.vue.app.dir.client, ... lib.path.separate (file)))
		}
	path (path) {
		return [this.vue.path.get ("/cgi-bin/style.css")].exist (path)
		}
	})

define ($$$.vue.is).class ("access", class {
	constructor (vue) { this.vue = vue }
	file () { return this.tcp () || this.vue.is.file (this.vue.request.path.substr (one)) || this.vue.is.path (this.vue.request.path) }
	tcp () { return ! (this.vue.request.cross.origin || this.vue.request.cross.session || this.vue.request.token) }
	process () { if (this.tcp ()) return $$$.express.cross.check ($$$.app.package.get ("host").cross.over, this.vue.request.parse_url.host.name) }
	referer () { return $$$.express.cross.check ($$$.app.package.get ("host").cross.origin, this.vue.request.cross.referer.host.name) }
	socket (socket) { if (this.client (socket)) return $$$.express.cross.check ($$$.app.package.get ("host").cross.origin, this.vue.request.cross.origin.host.name) }
	processor (socket) { if (this.client (socket)) return $$$.express.cross.check ($$$.app.package.get ("host").cross.over, this.vue.request.cross.origin.host.name) }
	client (socket) { if (socket) if (this.vue.request.cross.origin) if (this.vue.request.cross.session) if (this.vue.request.token) return true }
	})

define ($$$.vue).class ("fire", class {
	constructor (vue) {
		this.vue = vue
		}
	wall (ip) {
		var block = this.vue.app.package.get ("fire").wall.ip
		var allow = this.vue.app.package.get ("fire").wall ["ip:s"]
		var error = block.exist (ip || this.vue.request.ip)
		if (error) return error
		else if (allow.length) return ! allow.exist (ip || this.vue.request.ip)
		else return false
		}
	})

define ($$$.vue).function ("j_son", function () {
	if (lib.file.exist (this ["package.json"])) return true
	else if (this.error_log) this.app.error.log ("j_son").write ()
	return false
	})

define ($$$.vue).function ("base_url", function (url) {})
define ($$$.vue).class ("c_url", class {})

define ($$$.vue).function ("size_of", class {
	constructor (vue, request, response) {
		this.vue = vue
		this.request = request
		this.response = response
		this.data = {}
		}
	push (path, file, option) {
		if (path) {
			if (lib.file.exist (file) || lib.is.integer (file)) {
				var host, option = lib.option (option, {db: true, type: "file"})
				if (lib.is.string (file)) this.data [path] = lib.file.size (file)
				else this.data [path] = file
				var size = this.data [path]
				if (this.request.cross.origin) host = this.request.cross.origin.host.base.name
				else host = this.request.parse_url.host.base.name
				if (option.db) {
					var data = {
						host,
						ip: this.request.visitor.ip,
						type: option.type,
						path, size, byte: lib.number.format (size, {byte: true, decimal: (one + one)}),
						}
					var insert = this.vue.app.db.insert ("size_of").set (data).then (function (data) {
						if (null) console.log (data)
						})
					insert.catch ()
					}
				}
			}
		}
	})

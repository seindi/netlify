require ("core.min.js")
var lib = require ("core.min.js/src")
var $$$ = require ("vue.min.js/library/package.vue")
const {define, echo} = lib
const {zero, one} = lib

define ($$$.vue).class ("plugin", class {
	constructor (vue) {
		this.vue = vue
		this.list = []
		this.extend = []
		this.data = {}
		}
	start () {
		var path = lib.dir (this.vue.app.dir.plugin).dir, js, json
		for (var i in path) {
			if (lib.file.exist (js = lib.path.join (path [i], "package.js"))) {
				if (lib.file.exist (json = lib.path.join (path [i], "package.json"))) {
					var plugin = new $$$.vue.plugin.class (this.vue, path [i], js, json)
					this.extend [plugin.id] = plugin
					this.list.push (plugin.package.get ())
					}
				}
			}
		return this
		}
	distribution (overwrite) {
		return $$$.vue.plugin.distribution (this.vue, overwrite)
		}
	})

define ($$$.vue.plugin).class ("class", class {
	constructor (vue, path, js, json) {
		this.vue = vue
		this.path = path
		this.js = js
		this.package = new lib.json ((this.json = json), {data: {}})
		this.start ()
		}
	start () {
		this.id = this.package.get ("id") || this.package.set ({id: lib.hash.shuffle ()}).write ().get ("id")
		if (this.package.get ("$:active")) {
			this.require = require (this.js)
			if (lib.is.function (this.require)) this.require.call (this, this)
			}
		}
	})

define ($$$.vue.plugin).function ("distribution", function (vue, overwrite) {
	var distribution = lib.path.join (vue.app.dir.distribution, "plugin")
	distribution = lib.dir.read (distribution)
	for (var i in distribution.dir) {
		var name = lib.path.name (distribution.dir [i])
		var source = distribution.dir [i]
		var target = lib.path.join (vue.app.dir.plugin, name)
		if (overwrite) lib.dir.copy (source, target)
		else if (lib.dir.exist (target) === false) lib.dir.copy (source, target)
		}
	})

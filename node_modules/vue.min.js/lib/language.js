require ("core.min.js")
var lib = require ("core.min.js/src")
var $$$ = require ("vue.min.js/library/package.vue")
const {define, echo} = lib
const {zero, one} = lib

define ($$$.vue).class ("language", class {
	constructor (vue) {
		this.start (this.vue = vue)
		}
	start () {
		this.language = this.vue.app.package.get ("language")
		this.set (this.vue.app.session.get ("language", (this.id = (this.language.id || this.language ["*"] || "en-us"))), null, "load")
		}
	set (language, context, load) {
		if (load) {
			var file, data = {}
			if (["*", "universal"].exist (language)) language = this.language ["*"] || this.language.id
			if (this.language.list.exist (language)) {
				if (lib.file.exist (file = lib.path.join (this.vue.app.dir.language, language.concat (lib.file.extension.json)))) {
					this.id = language
					this.file = file
					this.package = new lib.json (this.file, {data: {}})
					data = this.package.get ()
					if (context) context.call (this, data)
					}
				}
			return {file, data}
			}
		else if (this.package.set (language, context)) return this
		else return this
		}
	get (language) {
		var prefix = ("lang").concat (":")
		if (language) if (language.begin (prefix)) language = language.shift (prefix)
		else return this.package.get (language) || language
		return this.package.get ()
		}
	insert (... language) { if (this.package.insert (... language)) return this }
	write (... language) { if (this.package.write (... language)) return this }
	})

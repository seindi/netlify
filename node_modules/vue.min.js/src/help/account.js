import vue, {lib, library} from "vue.min.js"
import ini from "@/package.json"
let {define} = lib
let {zero, one} = lib

vue.account = function () {}

vue.account.routine = function () {
	lib.time.interval (function () {
		var check = vue.socket.emit ("account", function (account) {
			console.log (123, account)
			vue.account.on_log (account)
			})
		check.catch (function (error) {
			console.log ("error", error)
			vue.account.un_log ()
			})
		}, 10)
	}

vue.account.require = function (view) {
	if (vue.account.on.line.value) if (view) view.value = true
	else vue.router.go ("account:login")
	else vue.router.go ("account:login")
	}

vue.account.get = function (key) {
	return lib.object.get.step (vue.account.data, key)
	}

vue.account.register = function (email, password, name) {
	email = (email || "").small ().trim ()
	password = (password || "").trim ()
	var profile = {name: (name || "").trim ()}
	var validation = new lib.validation
	validation.check ("name", profile.name).require ().name ()
	validation.check ("email", email).require ().email ()
	validation.check ("password", password).require ()
	return new lib.promise (function (resolve, reject) {
		validation = lib.validate (validation).then (function () {
			var register = vue.socket.send ("/account/register", {email, password, "profile:name": profile.name}).then (function (respond) {
				resolve (respond)
				})
			register.catch (reject)
			})
		validation.catch (reject)
		})
	}

vue.account.login = function (user, password) {
	user = (user || "").small ().trim ()
	password = (password || "").trim ()
	var validation = new lib.validation
	validation.check ("user", user).require ()
	validation.check ("password", password).require ()
	return new lib.promise (function (resolve, reject) {
		validation = lib.validate (validation).then (function () {
			var login = vue.socket.send ("/account/login", {user, password}).then (function (respond) {
				vue.account.on_log (respond)
				resolve (respond)
				})
			login.catch (reject)
			})
		validation.catch (reject)
		})
	}

vue.account.logout = function () {
	return new lib.promise (function (resolve, reject) {
		console.log (vue.account.id)
		var logout = vue.socket.emit ("account:logout", {id: vue.account.id}).then (function (respond) {
			vue.account.un_log ()
			resolve (respond)
			})
		logout.catch (reject)
		})
	}

vue.account.on_log = function (account) {
	vue.react (vue.account.data, account)
	vue.session ({account})
	vue.account.on.line.value = true
	}

vue.account.un_log = function () {
	vue.session.delete ("account")
	vue.session.delete ("account:on-line")
	vue.account.on.line.value = null
	}

vue.account.on = {line: vue.reference ()}
vue.account.data = vue.reactive ()

/**
 * xxx
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

import vue, {the, lib, library} from "vue.min.js"
import ini from "@/package.json"
let {define} = lib
let {zero, one} = lib.number

/**
 * xxx
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

vue.start = function () {
	var script
	if (script = vue.ini ("script")) if (script.start) for (var i in script.start) vue.script [script.start [i]] ()
	else vue.system.start ()
	else vue.system.start ()
	}

vue.start.up = function (context, option) {
	if (vue.start.up.end) {}
	else {
		vue.then (() => { vue.emit ("web:socket", context, option) }).catch (() => { vue.emit ("web:browser", context, option) })
		if (vue.start.up.end = true) {
			vue.document.emit ("focus")
			vue.document.emit ("click")
			vue.document.emit ("cursor:move")
			vue.document.emit ("cursor:in")
			vue.document.emit ("cursor:out")
			}
		}
	}

vue.system = function () {}
vue.system.setup = vue.reference ()
vue.system.ready = vue.reference ()
vue.system.start = function (context, option = {delay: null}) {
	vue.sys = {route: lib.route (), router: lib.router ()}
	vue.x = vue.store.use ("store")
	vue.v = vue.store.use ("pinia")
	vue.emit ("store")
	vue.emit ("pinia")
	vue.date.start ()
	lib.visitor.__ ()
	if (vue.visitor = vue.reactive (lib.visitor ())) {
		if (["computer"].exist (vue.visitor.device.type)) vue.computer = true
		else vue.mobile = true
		lib.dom.attribute ("body", "device", vue.visitor.device.type)
		lib.dom.attribute ("body", "browser", vue.visitor.browser.platform)
		if (ini.body.font) lib.dom.attribute ("body", "font", ini.body.font)
		if (ini.body.theme) lib.dom.attribute ("body", "theme", ini.body.theme)
		}
	var request = {
		header: function () {},
		timeout: lib.time.sleep (function () { if (lib.un (vue.system.setup.value)) vue.emit ("package:error/timeout") }, (vue.ini ("web:socket/timeout") || (one + one + one + one + one))),
		}
	vue.then (() => {
		vue.socket.watch (function () {
			vue.start.up (context, option)
			lib.time.sleep.clear (request.timeout)
			})
		})
	vue.catch (() => {
		vue.start.up (context, option)
		lib.time.sleep.clear (request.timeout)
		})
	vue.emit ("setup")
	}

vue.on ("web:socket", function (context, option) {
	vue.socket.emit ("package").catch (function (error) { vue.emit ("package:error", error) }).then (function (respond) {
		vue.react (vue.package, respond.package)
		vue.react (vue.visitor, respond.visitor)
		vue.link.data = respond.router.link
		if (respond.var) vue.react (vue.var, respond.var)
		if (respond.web) {
			if (respond.web.site) vue.react (vue.web.site, respond.web.site)
			if (respond.web.socket) vue.react (vue.web.socket, respond.web.socket)
			}
		if (vue.ini) {
			if (vue.package.fire) if (vue.package.fire.fighter === "base") vue.package.fire.base = vue.ini ("fire:base")
			}
		if ("session") {
			if (vue.cookie.check ()) return
			else vue.session (respond.session)
			}
		if ("language") {
			if (vue.package.language) vue.language.list.value = vue.package.language.list
			vue.language.apply (respond.language)
			}
		if ("date") {
			vue.date.set ("time:zone", vue.session.get ("time").zone, {session: "signature"})
			vue.date.routine ()
			vue.date.cache = lib.time.interval (vue.date.routine)
			if (vue.package.date) {
				for (var i in vue.package.date.format) {
					lib.date.format (i, vue.package.date.format [i])
					}
				}
			}
		if ("account") {
			if (null) {
				if (vue.account.id = vue.session.get ("account:on-line")) {
					vue.account.on_log (respond.session.account)
					}
				vue.account.routine ()
				}
			}
		vue.emit ("package")
		if (context) context.call (vue)
		if (vue.ping || (vue.ping = function () {})) vue.ping.cache = lib.time.interval (function () { vue.emit ("ping") }, (vue.ping.interval = vue.package.ping.interval))
		if (option.delay === true) lib.time.sleep (function () { vue.ready.value = true })
		else vue.ready.value = true
		vue.system.setup.value = true
		})
	})

vue.on ("web:browser", function (context, option) {
	if ("session") {
		vue.session ({
			time: {zone: (vue.session.get ("time").zone || vue.ini ("time").zone)},
			})
		}
	if ("date") {
		vue.date.set ("time:zone", vue.session.get ("time").zone, {session: "signature"})
		vue.date.routine ()
		vue.date.cache = lib.time.interval (vue.date.routine)
		if (vue.package.date) {
			for (var i in vue.package.date.format) {
				lib.date.format (i, vue.package.date.format [i])
				}
			}
		}
	vue.emit ("package")
	if (context) context.call (vue)
	if (option.delay === true) lib.time.sleep (function () { vue.ready.value = true })
	else vue.ready.value = true
	vue.system.setup.value = true
	})

/**
 * xxx
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

vue.import = function () {}
vue.export = function (data, setup) {
	if (lib.is.function (data)) if (setup = data) data = lib.un.define ()
	if (vue.ready.value || vue.system.ready.value) if (setup) setup.call ()
	vue.watch (vue.ready, function (ready) { if (ready || vue.ready.value) if (setup) if (vue.system.ready.value = true) setup.call () })
	return vue.data (data)
	}

vue.data = function (data) {
	return lib.object.assign ({vue, the, lib, library, zero, one}, vue.method, data)
	}

vue.bind = function (data) {
	return vue.data (data)
	}

/**
 * xxx
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

vue.layout.slot = function () {
	if (vue.sys.route.meta ["layout"]) {
		var layout = vue.layout.format (vue.sys.route.meta ["layout"], true)
		if (vue.partial.exist (layout)) return layout
		else return "layout:slot"
		}
	else return "layout:slot"
	}

vue.layout.format = function (layout, prefix) {
	if (prefix) return ("layout").concat (":").concat (layout)
	else return layout
	}

/**
 * xxx
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

vue.route = function () {
	vue.then (() => {
		if (vue.ready.value) {
			vue.media.query.screen.splash.start ()
			vue.emit ("route")
			}
		else vue.watch (vue.ready, function (ready) {
			if (ready) {
				vue.media.query.screen.splash.start ()
				vue.emit ("route")
				}
			})
		})
	vue.catch (() => {
		vue.media.query.screen.splash.start ()
		vue.emit ("route")
		})
	}

vue.router = function (v) {
	v.router = v.id
	return vue.next (v, vue.composition.api)
	}

vue.composition = function () {}
vue.composition.api = {
	mount: function () {
		vue.emit ("app:mount")
		},
	eject: function () {
		if (vue.date.cache) lib.time.interval.clear (vue.date.cache)
		if (vue.ping) if (vue.ping.cache) lib.time.interval.clear (vue.ping.cache)
		if (vue.account.cache) lib.time.interval.clear (vue.account.cache)
		vue.emit ("app:eject")
		},
	create: function () {
		vue.emit ("app:create")
		},
	update: function () {
		vue.emit ("app:update")
		},
	}

/**
 * xxx
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

lib.prop = function (name) {
	var prop = []
	for (var i in (name = name.split ("-"))) {
		if (i == zero) prop.push (name [i])
		else prop.push (name [i].uc_begin ())
		}
	return prop.implode ()
	}

lib.prop.s = function (... name) {
	return name.join ("-")
	}

/**
 * xxx
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

vue.commit = function (context) { return vue.x.commit ("mutation", context) }
vue.dispatch = function (context) { return vue.x.dispatch ("action", context) }
vue.method = function (key, value) { return vue.method [key] = value }

/**
 * xxx
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

class IO {
	constructor (context) { IO.then (context) }
	catch (context) { IO.catch (context) }
	}

IO.then = function (context) { vue.express (context) }, vue.then = function (context) { return new IO (context) }
IO.catch = function (context) { if (null || ! vue.express ()) context.call () }, vue.catch = function (context) { IO.catch (context) }

/**
 * xxx
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

vue.express = function (context, ... param) {
	if (context) if (vue.ini ("express")) return context.call (... param)
	return vue.ini ("express")
	}

vue.ini = function (key, value) {
	if (arguments.length > one) return vue.ini.data [key] = value
	else if (key) if (lib.is.object (key)) vue.react (vue.ini.data, key)
	else return vue.ini.data [key]
	else return vue.ini.data
	}

vue.ini.data = vue.reactive ({
	"express": false,
	"watch:legacy": false,
	"web:browser": null, "web:site": null, "web:socket": null, "web:socket/timeout": 5,
	"media-query:screen-splash": 5, "media-query:screen-splash/timeout": 60,
	"language": {
		"*": "en-us",
		"id": "en-us",
		"list": ["en-us", "kr", "id", "id-aceh"],
		"data": {"?": "Help"},
		},
	"web": {
		"site": {
			"setting": {
				"media-player:audio": true,
				"media-query:screen": true,
				"media-query:screen-splash": false,
				"media-query:line": true,
				"media-query:loading": true,
				"media-query:progress": true,
				},
			},
		},
	})

vue.ini (ini)

/**
 * xxx
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

vue.static = function () {}
vue.static.logo = function () {}
vue.static.logo.path = function (name) { return "/image/logo/" + name }

vue.theme = function () {}
define (vue.theme).set ("name", vue.ini ("theme").name)
define (vue.theme).function ("logo", function () {})
define (vue.theme.logo).function ("path", function (name) { return "/theme/" + vue.theme.name + "/image/logo/" + name })

/**
 * the end
 *
 * xxx://xxx.xxx.xxx/xxx
 */

import vue, {lib, library} from "vue.min.js"
import ini from "@/package.json"
let {define} = lib
let {zero, one} = lib

var socket = {
	url: (lib.dom.attribute ("meta[name=socket:url]", "content") || ""),
	token: (lib.dom.attribute ("meta[name=socket:token]", "content") || ""),
	io: class {
		constructor (... socket) {
			this.socket = socket
			}
		next (context) {
			this.then (context).catch ()
			return this
			}
		then (context) {
			this.context = context
			if ("error" in this) return this.emit (this.error)
			return this
			}
		catch (context) {
			if ("context" in this) return this.emit (context)
			else this.error = context
			return this
			}
		emit (context = console.error) {
			if (vue.socket.ready.value) return vue.socket.emit (... this.socket)
			else vue.watch (vue.socket.ready, function (ready) { if (ready || vue.socket.ready.value) vue.socket.emit (... this.socket).then (this.context).catch (context || this.error) }.bind ({socket: this.socket, context: this.context, error: this.error}))
			return this
			}
		},
	}

if (vue.socket = new lib.web.socket.io (socket.url, socket.token, vue.cookie.id)) {
	vue.then (() => {
		vue.socket.start (function () { vue.socket.ready = vue.reference () })
		vue.socket.on ("connect", function () { vue.on.line (true) })
		vue.socket.on ("disconnect", function () { vue.on.line (false) })
		vue.socket.on ("tokenizer", function (tokenizer) {
			if (this.socket.tokenizer = tokenizer) {
				if ("ready" in this.socket) {
					this.socket.ready.value = true
					}
				}
			})
		})
	vue.catch (() => {
		vue.on.line (true)
		})
	}

vue.socket.watch = function (context) {
	if (vue.socket.ready.value) context.call ()
	else vue.watch (vue.socket.ready, function (ready) { if (ready) context.call () })
	}

vue.socket.fetch = function (... context) {
	return new socket.io (... context)
	}

vue.socket.send = function (path, ... argument) {
	var argument = lib.argument.of (argument), data = lib.option (argument.object), context = argument.function
	if (context) return vue.socket.emit ("pipe", {path, method: "pipe", data}).then (context)
	else return vue.socket.emit ("pipe", {path, method: "pipe", data})
	}

import vue, {lib, library} from "vue.min.js"
import ini from "@/package.json"
let {define} = lib
let {zero, one} = lib

vue.url = vue.reactive ({current: {}})
vue.url.param = function (param) { return vue.sys.route [("param").concat ("s")][param] }
vue.url.previous = function (i = one) { vue.sys.router.go (- i) }
vue.url.go = vue.router.go = function (url, option) {
	if (url === true) return vue.sys.router.go ()
	if (lib.is.object (url)) return vue.sys.router.push (url)
	if (url.begin () === "/") return vue.sys.router.push (url)
	else return vue.sys.router.push (lib.object.concat ({name: url}, option))
	}

vue.url.convert = function (url) {
	if (lib.is.string (url)) {
		if ((url.begin () === "/") === false) {
			return {name: url}
			}
		}
	if (lib.is.object (url)) {
		var query = {}
		for (var i in url.query) query [i] = url.query [i]
		delete url.query
		url [("param").concat ("s")] = query
		return url
		}
	return url
	}

vue.parse_url = function () {
	var protocol = window.location.protocol.pop ()
	var host = window.location.host
	var path = vue.sys.route.path
	var query = lib.url.query.format (vue.sys.route.query)
	var url = lib.url.protocol.format (protocol) + host + path + query
	var link = lib.url.parse (document.url.value = url)
	vue.react (vue.url, link)
	vue.url.current = link
	}

vue.fetch = function (... url) {
	return vue.fetch.get (... url)
	}

vue.fetch.get = function (url, header) {
	url = [lib.url.convert (url)]
	if (header) url.push ({[("header").concat ("s")]: header})
	return vue.request.get (... url)
	}

vue.fetch.post = function (url, data, header) {
	url = [lib.url.convert (url), data]
	if (header) url.push ({[("header").concat ("s")]: header})
	return vue.request.post (... url)
	}

vue.link = function () {
	vue.then (() => {
		vue.on.progress.insert ("link")
		if (document.link) {
			if (document.link.error) {
				vue.app.router = vue.link.value (document.link)
				vue.link.error = true
				vue.on.progress.delete ("link")
				vue.emit ("link:error", vue.app.router)
				delete document.link
				}
			else {
				vue.app.router = vue.link.value (document.link)
				vue.link.error = null
				vue.on.progress.delete ("link")
				vue.emit ("link", vue.app.router)
				delete document.link
				}
			}
		else {
			var error = function (data) {
				vue.app.router = vue.link.value (data)
				vue.link.error = true
				vue.on.progress.delete ("link")
				vue.emit ("link:error", vue.app.router)
				document.title = vue.app.router.title
				}
			vue.socket.emit ("link", vue.url.current).catch (error).then (function (data) {
				vue.app.router = vue.link.value (data)
				vue.link.error = null
				vue.on.progress.delete ("link")
				vue.emit ("link", vue.app.router)
				document.title = vue.app.router.title
				})
			}
		})
	}

vue.link.value = function (data = {}) {
	var value = {
		title: vue.language ("untitled"),
		}
	data.link = vue.link.data || {}
	data.component = data.component || {}
	return lib.object.merge (value, data)
	}

vue.on ("route", function () {
	vue.link ()
	vue.model.clear ()
	vue.emit ("link:url")
	})

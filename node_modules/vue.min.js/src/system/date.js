import vue, {lib, library} from "vue.min.js"
import ini from "@/package.json"
let {define} = lib
let {zero, one} = lib

vue.date = function (... date) { return vue.date.format (... date) }
vue.date.get = vue.reactive ()

vue.date.start = function () {
	lib.date.universal (lib.date.zone ["universal"].offset)
	vue.date.set ("time:zone", vue.session.get ("time:zone"), {check: "signature"})
	vue.date.routine ()
	}

vue.date.routine = function () {
	vue.date.create = lib.date.create ({
		zone: vue.time.zone.offset,
		month: {name: vue.language ("date-time:month")},
		day: {name: vue.language ("date-time:day")},
		})
	vue.date.time = vue.date.create (vue.time.stamp.value = lib.time.stamp ())
	var format = lib.date.format ()
	for (var i in format) vue.date.get [i] = vue.date.time.format (format [i])
	vue.emit ("date:routine")
	}

vue.date.format = function (... date) {
	var format = "default", offset, time = vue.time.stamp.value
	for (var i in date) {
		if (lib.is.number (date [i])) if (date [i]) time = date [i]
		if (lib.is.string (date [i])) if (date [i]) format = date [i]
		if (lib.is.object (date [i])) offset = date [i]
		}
	return vue.date.create (time).format (format, offset)
	}

vue.date.transform = function (format, ... date) {
	return vue.date.create (format).format (... date)
	}

vue.date.factory = function (date) {
	date = date.string ()
	var year = date.substr (0, 4)
	var month = date.substr (4, 2)
	var day = date.substr (6, 2)
	return [day, month, year].join ("/")
	}

vue.date.set = function (key, value, ... argument) {
	var argument = lib.function.argument (... argument), option = lib.option (argument.object, {socket: true}), context = argument.function
	if (key === "time:zone") {
		if (lib.time.zone.exist (value) || ["*", "universal"].exist (value)) {
			if (value === "*") value = "universal"
			vue.react (vue.time.zone, {name: vue.cookie.set ("time:zone", value, option.check)})
			vue.time.zone.offset = lib.time.zone (vue.time.zone.name).offset
			vue.then (() => {
				vue.socket.watch (function () {
					vue.socket.emit ("time:zone", vue.time.zone.name).next (context)
					if (option.socket) vue.session.set ({time: {zone: vue.time.zone.name}}).next (context)
					})
				})
			vue.catch (() => {
				vue.session.set ({time: {zone: vue.time.zone.name}})
				})
			}
		}
	}

vue.time = function () { return vue.time.stamp.value }
vue.time.stamp = vue.reference (lib.time.stamp ())
vue.time.zone = vue.reactive ({name: "universal", offset: lib.date.zone ["universal"].offset})

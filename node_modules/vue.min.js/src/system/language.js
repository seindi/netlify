import vue, {lib, library} from "vue.min.js"
import ini from "@/package.json"
let {define} = lib
let {zero, one} = lib

vue.lang = {list: vue.ini ("language").list}
library.language = {"*": vue.ini ("language").data}
for (var i in vue.lang.list) library.language [vue.lang.list [i]] = require ("@/store/language/" + vue.lang.list [i] + ".json")

vue.language = function (key, value) {
	if (key) return vue.__ [key] || value || ""
	else return vue.__
	}

vue.language.format = function (key, ... value) {
	if (key) return (vue.__ [key] || key || "").format (... value)
	else return ""
	}

vue.language.apply = function (language) {
	for (var i in language) vue.__ [i] = language [i]
	}

vue.language.exist = function (language) {
	if (vue.language.list.value.exist (language)) return true
	else if (library.language) return language in library.language
	else return false
	}

vue.language.set = function (language, ... argument) {
	var argument = lib.function.argument (... argument), option = (argument.object || {}), context = argument.function, session = argument.boolean
	if (["*"].exist (language)) vue.language.apply (library.language ["*"])
	if (vue.language.exist (language)) {
		vue.socket.emit ("language:set", language).next (function (data) {
			vue.language.apply (data)
			vue.session.set ("language", language, session)
			if (context) context.call (null, language)
			})
		}
	}

if (vue.language.list = vue.reference ([]))
if (vue.ini ("language")) vue.language.apply (library.language ["*"] = library.language [vue.ini ("language") ["*"]])

/**
 * xxx
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

require ("core.min.js")
var lib = require ("core.min.js/src")
const {define} = lib
const {zero, one} = lib

var $$$ = {
	express: require ("express.min.js"),
	app: require ("express.min.js/src"),
	vue: require ("vue.min.js/package.vue"),
	}

/**
 * xxx
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

let vue = new lib.app

/**
 * xxx
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

vue.get ("/", function (request, response) {
	var router = {
		title: "Home",
		}
	response (router)
	})

/**
 * xxx
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

/*
vue.get ("/sale", function (request, response) {
	var router = {
		title: "Sale",
		}
	response (router)
	})

vue.get ("/cgi-bin/sale", function (request, response) {
	var vue = this
	var length = zero
	var r = function (db) {
		length ++
		if (length === db.length) response ({length, data: db.data})
		}
	var select = this.app.db.select ("sale").find ().then (function (db) {
		for (var i in db.data) {
			vue.app.db.select ("cart").find ({hash: db.data [i].hash}).then (function (cart) {
				db.data [this.index].cart = cart.data
				r (db)
				}.bind ({index: i})).catch (console.log)
			}
		})
	select.catch (console.log)
	})
*/

/**
 * xxx
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

/*
vue.get ("/report", function (request, response) {
	lib.time.sleep (function () {
		var router = {
			title: "page:report",
			}
		response (router)
		})
	})
*/

/**
 * cashier
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

vue.get ("/cashier", function (request, response) {
	var router = {
		title: "Cashier",
		}
	response (router)
	})

/**
 * cashier product
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

vue.get ("/cashier/product", function (request, response) {
	var router = {
		title: "Product",
		}
	response (router)
	})

vue.get ("/cgi-bin/cashier/product", function (request, response) {
	this.vue.app.db.select ("product").find ().then (response).catch (response.error)
	})

vue.post ("/cgi-bin/cashier/product/insert", function (request, response) {
	var product = {
		code: request.data.transport.code,
		name: request.data.transport.name,
		stock: lib.to.number (request.data.transport.stock),
		price: lib.to.number (request.data.transport.price),
		description: request.data.transport.description,
		}
	if (request.data.transport.file.success) product.image = request.data.transport.file.name
	var insert = function (db) {
		if (request.data.transport.file.success) {
			var upload = function (file, error) {
				if (error) response.error (error)
				else {
					lib.file.copy (file.path, lib.path.join (this.vue.app.dir.static, file.name))
					response (db)
					}
				}
			lib.file.upload (request.data.transport.file.name, request.data.transport.file.buffer, upload.bind ({vue: this.vue}))
			}
		else response (db)
		}
	insert = this.app.db.insert ("product").set (product).then (insert.bind ({vue: this}))
	insert.catch (console.log)
	})

vue.put ("/product/update/:id", function (request, response) {
	var product = {
		code: request.data.transport.code,
		name: request.data.transport.name,
		stock: lib.to.number (request.data.transport.stock),
		price: lib.to.number (request.data.transport.price),
		description: request.data.transport.description,
		}
	if (request.data.transport.file.success) product.image = request.data.transport.file.name
	var update = function (db) {
		if (request.data.transport.file.success) {
			var upload = function (file, error) {
				if (error) response.error (error)
				else {
					lib.file.copy (file.path, lib.path.join (this.vue.app.dir.static, file.name))
					response (db)
					}
				}
			lib.file.upload (request.data.transport.file.name, request.data.transport.file.buffer, upload.bind ({vue: this.vue}))
			}
		else response (db)
		}
	update = this.app.db.update ("product").set (product).where (request.slug.id).then (update.bind ({vue: this}))
	update.catch (console.log)
	})

vue.delete ("/product/delete/:id", function (request, response) {
	var remove = function (db) {
		response (db)
		}
	remove = this.app.db.delete ("product").where (request.slug.id).then (remove.bind ({vue: this}))
	remove.catch (console.log)
	})

/**
 * cashier cart
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

vue.post ("/cgi-bin/cashier/cart/insert", function (request, response) {
	var vue = this
	var data = []
	var hash = lib.hash.shuffle ()
	var item = zero
	var grand_total = zero
	for (var i in request.data.transport) {
		var price = request.data.transport [i].product.price
		var quantity = request.data.transport [i].quantity
		var total = price * quantity
		grand_total = grand_total + total
		item ++
		data.push ({hash, product: lib.object.id (i), price, quantity, total})
		this.app.db.select ("product").find (request.data.transport [i].product._id).then (function (p) {
			vue.app.db.update ("product").set ({stock: p.data [0].stock - this.quantity}).then (console.log).catch (console.log)
			}.bind ({quantity})).catch (console.log)
		}
	this.app.db.insert ("sale").set ({hash, total: grand_total, item}).then (function () {}).catch (console.log)
	var insert = function (db) {
		response (db)
		}
	insert = this.app.db.insert ("cart").set (data).then (insert.bind ({vue: this}))
	insert.catch (console.log)
	})

/**
 * account
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

vue.get ("/account/register", function (request, response) {
	var router = {
		title: "Account Register",
		}
	response (router)
	})

vue.get ("/account/login", function (request, response) {
	var router = {
		title: "Account Login",
		}
	response (router)
	})

/**
 * serial
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

vue.post ("/cgi-bin/serial", function (request, response) {
	var serial = request.post ("serial").big ().trim ()
	if (serial === "12345-12345-12345") {
		//
		}
	})

/**
 * xxx
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

vue.catch ("*", function (request, response) {
	response.error ({
		title: "Errors",
		})
	})

/**
 * socket
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

vue.on ("package", function (request, response) {
	if (this.vue.app.package.get ("db").install) {}
	else {
		$$$.vue.account.install.call (this)
		this.vue.app.package.set ({db: {install: true}}).write ()
		}
	})

vue.on ("package", function (request, response) {
	var $__app = this.vue.app.package.get ()
	var $__vue = this.vue.package.get ()
	var router = {link: lib.object.merge ($__app.router.link, $__vue.router.link)}
	var web = {site: lib.object.merge (this.vue.app.package.get ("web").site), socket: {buffer: {size: $$$.app.package.get ("web").socket.buffer.size, unit: $$$.app.package.get ("web").socket.buffer.unit}}}
	var variable = {}
	if (request.prop ()) {
		this.vue.app.package.set (request.data).write ()
		response ($$$.vue.package (this.vue.app.package.get ()))
		}
	else response ({
		package: $$$.vue.package ($__app),
		session: this.vue.app.session.get (),
		language: this.vue.app.language.get (),
		visitor: request.visitor,
		web, router, var: variable,
		})
	})

vue.on ("date", function (request, response) {
	response ()
	})

vue.on ("time", function (request, response) {
	response ()
	})

vue.on ("session", function (request, response) {
	if (request.prop ()) this.vue.app.session.set (request.data).write ()
	response (this.vue.app.session.get ())
	})

vue.on ("session:delete", function (request, response) {
	if (request.string ()) this.vue.app.session.delete (request.data).write ()
	response (this.vue.app.session.get ())
	})

vue.on ("language", function (request, response) {
	response ()
	})

vue.on ("language:data", function (request, response) {
	var data = this.vue.app.language.set (request.data, null, "load").data
	response (data)
	})

vue.on ("language:set", function (request, response) {
	var language = request.data
	var session = lib.context ({vue: this.vue, language}, function () { if (this.vue.app.session.set ("language", this.language).write ()) this.vue.app.tcp.session.set ("language", this.language).write () })
	var data = this.vue.app.language.set (language, session, "load").data
	response (data)
	})

vue.on ("file:upload", function (request, response) {
	if (request.data.file) {
		var upload = function (file, error) {
			if (error) response.error (error)
			else {
				lib.file.move (file.path, lib.path.join (this.vue.app.dir.static, file.name))
				response ({name: file.name, hash: file.hash})
				}
			}
		lib.file.upload (request.data.file.name, request.data.file.buffer, upload.bind ({vue: this.vue}))
		}
	else response.error ("file")
	})

vue.on ("...", function (request, response) {
	response (request.data)
	})

vue.on ("*", function (request, response) {
	response ()
	})

/**
 * account
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

/*
vue.on ("account", function (request, response) {
	if (this.vue.app.session.get ("account:on-line")) response (this.vue.app.session.get ("account"))
	else response.error ()
	})

vue.pipe ("/account/register", function (request, response) {
	var post = {
		email: request.post ("email").small ().trim (),
		password: lib.hash.password (request.post ("password").trim ()),
		profile: {name: request.post ("profile:name").trim ()},
		}
	var db = {
		find: {email: {"email.address": post.email}},
		account: function (fetch) {
			if (fetch.length) response.error (lib.http.header.status.error.found)
			else {
				var data = $$$.vue.account.field ({email: [{name: "default", address: post.email}], password: post.password, profile: {name: post.profile.name}})
				db.insert = this.vue.app.db.insert ("account").set (data).then (db.insert.bind ({vue: this.vue}))
				db.insert.catch (response.error)
				}
			},
		insert: function (respond) {
			if (respond.length) {
				var account = respond.data.single ()
				db.log = this.vue.app.db.insert ("account_log").set ({account: account.id, sign: {up: [{stamp: this.vue.time (), ip: request.visitor.ip, code: lib.hash.shuffle ()}], in: [], out: []}}).then (db.log (account).bind ({vue: this.vue}))
				db.log.catch (response.error)
				}
			},
		log: function (account) {
			return function (respond) {
				account = $$$.vue.account.field.filter (account)
				response (account)
				}
			},
		}
	db.account = this.vue.app.db.select ("account").find (db.find.email).then (db.account.bind ({vue: this.vue}))
	db.account.catch (response.error)
	})

vue.pipe ("/account/login", function (request, response) {
	var post = {
		user: request.post ("user").small ().trim (),
		password: lib.hash.password (request.post ("password").trim ()),
		}
	var db = {
		find: {
			by: "account",
			user: {"||": [{"user.name": post.user}, {"email.address": post.user}, {"phone.number": post.user}], status: "active"},
			account: {"&": [{"||": [{"user.name": post.user}, {"email.address": post.user}, {"phone.number": post.user}]}, {password: post.password, status: "active"}]},
			},
		account: function (respond) {
			if (respond.length) {
				if (respond.data.single ().password === post.password) {
					var account = respond.data.single ()
					db.log = this.vue.app.db.update ("account_log").set ().push ({"sign.in": {stamp: this.vue.time (), ip: request.visitor.ip}}).find ({account: account.id}).then (db.log (account).bind ({vue: this.vue}))
					db.log.catch (response.error)
					}
				else response.error (lib.http.header.status.error.forbidden)
				}
			else response.error (lib.http.header.status.error.found)
			},
		log: function (account) {
			return function (respond) {
				account = $$$.vue.account.field.filter (account)
				$$$.vue.account.session.call (this, account)
				response (account)
				}
			},
		}
	db.user = function (respond) {
		if (respond.length) {
			var account = $$$.vue.account.field.filter (respond.data.single ())
			response (account)
			}
		else response.error (lib.http.header.status.error.found)
		}
	db.user.password = function (respond) {
		if (respond.length) {
			var account = $$$.vue.account.field.filter (respond.data.single ())
			$$$.vue.account.session.call (this, account)
			response (account)
			}
		else response.error (lib.http.header.status.error.forbidden)
		}
	if (db.find.by === "account") {
		var select = this.vue.app.db.view.select ("account").find (db.find.user).then (db.account.bind ({vue: this.vue}))
		select.catch (response.error)
		}
	else if (db.find.by === "user") {
		var select = this.vue.app.db.view.select ("account").find (db.find.user).then (db.user.bind ({vue: this.vue}))
		select.catch (response.error)
		}
	else {
		var select = this.vue.app.db.view.select ("account").find (db.find.account).then (db.user.password.bind ({vue: this.vue}))
		select.catch (response.error)
		}
	})

vue.on ("account:logout", function (request, response) {
	response ()
	})
*/

/**
 * xxx
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

define (module).export (vue)

/**
 * the end
 *
 * xxx://xxx.xxx.xxx/xxx
 */

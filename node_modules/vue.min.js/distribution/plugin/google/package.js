require ("core.min.js")
var lib = require ("core.min.js/src"), v_dom = lib.dom.format
var $$$ = require ("vue.min.js/plugin/package")
const {define} = lib
const {zero, one} = lib
let j_son = function () { return lib.file.get.json (lib.path.join (__dirname, "package.json")) }, ini = j_son ()

var convert = {
	"http://analytic.google.com": "https://google-analytics.com",
	"http://static.font.google.com": "https://fonts.gstatic.com",
	"http://api.font.google.com": "https://fonts.googleapis.com",
	"http://icon.font.google.com/material/symbol": "https://fonts.googleapis.com/icon?family=Material+Symbols+Outlined|Material+Symbols+Rounded|Material+Symbols+Sharp",
	"http://icon.font.google.com/material": "https://fonts.googleapis.com/icon?family=Material+Icons|Material+Icons+Outlined|Material+Icons+Round|Material+Icons+Sharp|Material+Icons+Two+Tone",
	"http://font.google.com/roboto/mono": "https://fonts.googleapis.com/css2?family=Roboto+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&display=swap",
	"http://font.google.com/roboto/condensed": "https://fonts.googleapis.com/css2?family=Roboto+Condensed:ital,wght@0,300;0,400;0,700;1,300;1,400;1,700&display=swap",
	"http://font.google.com/roboto": "https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap",
	"http://font.google.com/opensans": "https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap",
	"http://font.google.com/poppins": "https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap",
	"http://font.google.com/ubuntu": "https://fonts.googleapis.com/css2?family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap",
	}

function google (plugin) {}
google.url = "vue://cgi-bin/plugin/google/"
google.adsense = {url: "vue://cgi-bin/plugin/google/adsense/", dir: lib.path.join (__dirname, "adsense")}
google.analytic = {url: "vue://cgi-bin/plugin/google/analytic/", dir: lib.path.join (__dirname, "analytic")}
google.tag = {url: "vue://cgi-bin/plugin/google/tag/", dir: lib.path.join (__dirname, "tag"), prefix: "https://www.googletagmanager.com/gtag/js?id=", manager: {prefix: "https://www.googletagmanager.com/gtm.js?id="}}

$$$.on ("render:setup", function (request, response, render) {
	ini = j_son ()
	render.dom.push ("link", {rel: "dns-prefetch", href: "http://analytic.google.com"}, null, {}, ["crossorigin"])
	render.dom.push ("link", {rel: "preconnect", href: "http://static.font.google.com"}, null, {}, ["crossorigin"])
	render.dom.push ("link", {rel: "preconnect", href: "http://api.font.google.com"}, null, {}, ["crossorigin"])
	})

$$$.on ("render:convert", function (request, response, render) {
	for (var i in convert) render.markup = render.markup.replace (i, convert [i])
	})

$$$.on ("_render:setup", function (request, response, render) {
	ini = j_son ()
	var tmp
	var $ = {theme: this.package.get ("theme")}
	$.google = {font: $.theme ["google:font"], icon: $.theme ["google:icon"]}
	render.dom.push ("link", {rel: "preconnect", href: "http://static.font.google.com"}, null, {}, ["crossorigin"])
	render.dom.push ("link", {rel: "preconnect", href: "http://api.font.google.com"}, null, {}, ["crossorigin"])
	if ($.theme) {
		if ($.google.font) for (var i in $.google.font) if (tmp = convert [("http://font.google.com/").concat ($.google.font [i])]) render.dom.push ("css", {href: tmp}, ["crossorigin"])
		if ($.google.icon) for (var i in $.google.icon) if (tmp = convert [("http://icon.font.google.com/").concat ($.google.icon [i])]) render.dom.push ("css", {href: tmp}, ["crossorigin"])
		}
	render.dom.push ("js", {src: google.url.concat ("script.js")})
	if (ini.data.tag.id) {
		render.dom.push ("js", {src: google.tag.prefix.concat (ini.data.tag.id)}, ["async"])
		render.dom.push ("script", {}, `google_tag ("${ini.data.tag.id}")`)
		}
	if (ini.data.tag.manager.id) {
		render.dom.push ("js", {src: google.tag.manager.prefix.concat (ini.data.tag.manager.id)}, ["async"])
		render.dom.push ("script", {}, `google_tag_manager ("${ini.data.tag.manager.id}")`)
		}
	})

define (module).export (google)

/**
 * xxx
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

require ("core.min.js")
var lib = require ("core.min.js/src")
const {define} = lib
const {zero, one} = lib
let $$$ = {express: require ("express.min.js"), app: require ("express.min.js/src")}
let $ = require ("vue.min.js/package-lock")

/**
 * xxx
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

class vue {
	constructor (app, request, response, socket) {
		if (app instanceof vue.app) app.link = this
		$$$.app.emitter (this)
		this.app = app
		this.request = request
		this.response = response
		this.socket = socket
		this.router = {slot: []}
		this.io = null
		this.path = new vue.path (this)
		this.plugin = new vue.plugin (this)
		this.fire = new vue.fire (this)
		this.is = new vue.is (this)
		this.style = new vue.style (this)
		this.size_of = new vue.size_of (this, this.request, this.response)
		this.data = {base: vue.data.base (this), create: vue.data.create (this), cache: vue.data.cache (this)}
		this.c_url = ""
		this.error_log = null
		}
	setup (tokenizer) {
		return vue.setup.call (this, tokenizer)
		}
	on (event, context) {
		return vue.on (this, event, context)
		}
	render (request, response) {
		if (true) return vue.render.call (this, request, response)
		else return this.response.send (vue.render.call (this, request, response))
		}
	require () {
		var main, script = lib.path.join (this.app.dir.script, "package.js")
		if (main = this.app.package.get ("main")) if (lib.file.exist (main = lib.path.join (this.app.dir.script, main.concat (lib.file.extension.json)))) return require (main)
		if (lib.file.exist (script)) return require (script)
		return require ("vue.min.js/distribution")
		}
	debug (debug) {
		if (debug === "path") {
			console.log ("app.directory", this.app.directory)
			console.log ("app.client", this.app.client)
			console.log ("app.dir", this.app.dir)
			console.log ("app [package.json]", this.app ["package.json"])
			console.log ("vue [package.json]", this ["package.json"])
			}
		}
	}

/**
 * xxx
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

define (vue).set ("app", require ("vue.min.js/library/app"))
define (vue).set ("application", require ("vue.min.js/library/application"))

define (vue).set ("fp", {script: lib.file.get.content (lib.path.join (define (vue).set ("directory", $.directory), "distribution", "package.js")).trim ()})
vue.fp.style = {css: lib.file.get.content (lib.path.join (vue.directory, "distribution", "css", "style.css")).trim ()}
vue.fp.markup = lib.file.get.content (lib.path.join (vue.directory, "package.html")).trim ()

/**
 * xxx
 *
 * title
 * description
 * sub description
 *
 * xxx://xxx.xxx.xxx/xxx
 */

define (module).export (vue)

/**
 * the end
 *
 * xxx://xxx.xxx.xxx/xxx
 */
